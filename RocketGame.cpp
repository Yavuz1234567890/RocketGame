//	Generated by anEngine2D																																									
// Do not edit this file																																									
#include "Core/anApplication.h"																							 
#include "Core/anEntryPoint.h"																								 
#include "Core/anKeyCodes.h"																									 
#include "State/anStateManager.h"																						 
#include "Math/anMath.h"																											 
#include "Project/anProject.h"																									
#include "Device/anGPUCommands.h"																							
#include "Core/anInputSystem.h"																						
#include "Scene/anSceneSerializer.h"																						
#include "Scene/anSceneManager.h"																						
																																									
class anGameState;																																									
																																							 
class anEngine2DApplication : public anApplication														 
{																																						 
public:																																			 
	anEngine2DApplication()																											 
		: anApplication({ "RocketGame", 1200, 700, false, false })		 
	{																																						 
	}																																						 
																																							 
	~anEngine2DApplication()																										 
	{																																						 
	}																																						 
																																							 
	void Initialize() override																									 
	{																																						 
		anInitializeRandomDevice();																								 
																																							 
		anProjectManager::LoadProject("RocketGame.anProj");																																				
																																							 
		const int width = anDisplayResolution::DisplayResolutions[anProjectManager::GetCurrentProject()->ResolutionID].Width;																																																								
		const int height = anDisplayResolution::DisplayResolutions[anProjectManager::GetCurrentProject()->ResolutionID].Height;																																																							
																																							 
		if (anProjectManager::GetCurrentProject()->IsFullscreen) mWindow->MakeFullscreen();																								 
		mWindow->SetSize(width, height);																																																																		
																																							 
		SetCurrentState<anGameState>();																						 
	}																																						 
																																							 
	void Update(float dt) override																							 
	{																																						 
	}																																						 
																																							 
	void OnEvent(const anEvent& event) override																	 
	{																																						 
	}																																						 
																																							 
	void OnImGuiRender() override																								 
	{																																						 
	}																																						 

	void SetStartScenePath(const anString& path)
	{																																						 
		mStartScenePath = path;
	}																																						 

	anString GetStartScenePath() const
	{																																						 
		return mStartScenePath;
	}																																						 

private:
	anString mStartScenePath;
};																																						 
																																							 
class anGameState : public anState																								
{																																								
public:																																					
	anGameState(anApplication* app)																									
		: anState(app)																																
	{																																								
	}																																								
																																									
	~anGameState()																																	
	{																																								
	}																																								
																																									
	void Initialize() override																											
	{																																								
		mCurrentPath = anFileSystem::current_path();																																													
																																																																					
		mAssetsPath = mCurrentPath / "assets";																																															
																																																																					
		mApplication->GetWindow()->SetTitle(anProjectManager::GetCurrentProject()->Name);																											
																																																																					
		mStartScenePath = ((anEngine2DApplication*)mApplication)->GetStartScenePath();
		if (mStartScenePath.empty()) mStartScenePath = anProjectManager::GetCurrentProject()->StartScene;
																																																																					
		mfWidth = (float)anDisplayResolution::DisplayResolutions[anProjectManager::GetCurrentProject()->ResolutionID].Width;																																																								
		mfHeight = (float)anDisplayResolution::DisplayResolutions[anProjectManager::GetCurrentProject()->ResolutionID].Height;																																																							
																																																																					
		auto loadCallback = [&](anNativeScriptComponent& component, anEntity& entity)
			{																								
			};																							

		auto onEntityCopy = [&](anEntity& entity)
			{																								
				if (entity.HasComponent<anNativeScriptComponent>()) {
					auto& comp = entity.GetComponent<anNativeScriptComponent>();

					loadCallback(comp, entity);
				}
			};																							

		anScene::SetOnEntityCopyCallback(onEntityCopy);
		anGlobalSceneSerializer.SetLoadNativeScriptCallback(loadCallback);
		anSceneManager::Load(mCurrentPath.string(), mStartScenePath);													
																																																																					
		anSceneManager::Get()->RuntimeInitialize();
	}																																																																				
																																																																					
	void Update(float dt) override																																																					
	{																																																																				
		anSceneManager::Get()->OnViewportSize(int(mfWidth), int(mfHeight));																																									
																																																																					
		anClearColor(anSceneManager::Get()->GetClearColor());																																																
		anEnableBlend();																																																											
																																																																					
		anSceneManager::Get()->RuntimeUpdate(dt);																																																						
																																																																					
		anRenderer2D::Get().End();																																																						
	}																																																																				
																																																																					
	void OnEvent(const anEvent& event) override																																															
	{																																																																				
		if (event.Type == anEvent::WindowClose)																																																																				
			anSceneManager::Get()->RuntimeStop();																																										

		anSceneManager::Get()->RuntimeOnEvent(event);
	}																																										
																																											
	void OnImGuiRender() override																												
	{																																										
	}																																										
																																										
private:																																									
  anFileSystem::path mCurrentPath;
  anFileSystem::path mAssetsPath;

  float mfWidth = 0.0f;
  float mfHeight = 0.0f;

	 anString mStartScenePath;
};																																										
																																							 
int anStartApplication(char** args, int argc)																 
{																																						 
	anEngine2DApplication* app = new anEngine2DApplication();										 
	if (argc == 2) app->SetStartScenePath(args[1]);
	app->Start();																																 
																																							 
	return 0;																																		 
}																																						 
